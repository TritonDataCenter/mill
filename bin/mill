#!/usr/bin/env node
/**
 * Copyright (c) 2013 Joyent Inc. All rights reserved.
 */

var p = console.log;
var e = console.error;
var crypto = require('crypto');
var fs = require('fs');
var path = require('path');
var util = require('util'),
    format = util.format;

var assert = require('assert-plus');
var bunyan = require('bunyan');
var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;
//var LineStream = require('lstream');
var manta = require('manta');
var vasync = require('vasync');

var common = require('../lib/common'),
    zeroPad = common.zeroPad;
var errors = require('../lib/errors');



//---- globals & config

var NAME = 'mill';

var log = bunyan.createLogger({
    name: NAME,
    serializers: bunyan.stdSerializers,
    stream: process.stderr,
    level: 'warn'
});



//---- internal support stuff

/**
 * Return a time for the given ISO date or time of day string, if can.
 * Else return undefined.
 */
function parseTime(s, now) {
    var d;
    if (s === 'now') {
        d = now;
    } else if (/^\d{4}-\d{2}-\d{2}/.test(s)) {
        d = new Date(s);
    } else if (/^\d{2}:\d{2}(:\d{2}Z?)?$/.test(s)) {
        // Time of day: use that time from today (or yesterday)
        d = new Date(now.toISOString().split('T')[0] + 'T' + s);
        if (d > now) {
            d = new Date(d.valueOf() - 24 * 60 * 60 * 1000);
        }
    }
    if (d && String(d) === 'Invalid Date') {
        d = undefined;
    }
    return d;
}

/**
 * Calculate a relative date.
 */
function relativeDate(relTo, op, range) {
    assert.object(relTo, 'relTo');
    assert.ok(['-', '+'].indexOf(op) !== -1);
    assert.string(range, 'range');

    var rangePat = /^(\d+)([smhd])$/;
    var match = rangePat.exec(range);
    if (!match) {
        throw new Error(format('invalid range: "%s"', range));
    }

    var num = match[1];
    var type = match[2];
    var delta = 0;
    switch (type) {
        case 's':
            delta += num * 1000;
            break;
        case 'm':
            delta += num * 60 * 1000;
            break;
        case 'h':
            delta += num * 60 * 60 * 1000;
            break;
        case 'd':
            delta += num * 24 * 60 * 60 * 1000;
            break;
    }

    var t = relTo.valueOf();
    if (op === '+') {
        t += delta;
    } else {
        t -= delta;
    }
    return new Date(t);
}


/**
 * Parsing the 'start' and 'end' args:
 *
 * start=<time> end=<time>
 * start=<time>                 start time - 5m after that
 * start=<time> end=<range>
 * end=<time>                   start 5m before end time - end time
 * start=<range> end=<time>     start <range> time before end - end time
 * start=<range> end=<range>    ???
 *      start=1h end=5m         from an hour ago to 5 minutes after that
 * (no args)                    last 5m range available (10m ago - 5m ago ?)
 */
function parseStartEnd(startArg, endArg) {
    var now = new Date();
    var start = parseTime(startArg, now);
    var end = parseTime(endArg, now);

    if (start && end) {
        /* pass */
    } else if (start) {
        end = relativeDate(start, '+', endArg || '5m');
    } else if (end) {
        start = relativeDate(end, '-', startArg || '5m');
    } else {
        start = relativeDate(now, '-', startArg || '10m');
        end = now;
    }

    if (end < start) {
        throw new errors.UsageError(format('end "%s" is before start "%s"',
            end.toISOString(), start.toISOString()));
        return;
    }

    return {start: start, end: end};
}


/**
 * Parse out the common 'service=... instance=... start=... end=...' CLI args
 * into options appropriate for `.find`.
 */
function findOptsFromArgs(args, allowExtra) {
    var startArg;
    var endArg;
    var svcs = [];
    var insts = [];
    var extra = [];
    for (var i = 0; i < args.length; i++) {
        var arg = args[i];
        var eq = arg.indexOf('=');
        if (eq === -1) {
            if (allowExtra) {
                extra.push(arg);
                continue;
            } else {
                throw new errors.UsageError('invalid argument, no "=": ' + arg);
            }
        }
        var field = arg.slice(0, eq);
        var value = arg.slice(eq + 1);
        switch (field) {
        case 'service':
        case 'svc':
        case 's':
            svcs.push(value);
            break;
        case 'instance':
        case 'inst':
        case 'i':
            insts.push(value);
            break;
        case 'start':
            startArg = value;
            break;
        case 'end':
            endArg = value;
            break;
        default:
            if (allowExtra) {
                extra.push(arg);
            } else {
                throw new errors.UsageError('unknown field: ' + field);
            }
        }
    }

    var dates = parseStartEnd(startArg, endArg);

    return {svcs: svcs, insts: insts, start: dates.start, end: dates.end,
        extra: extra};
}



//---- the CLI

function Mill() {
    Cmdln.call(this, {
        name: NAME,
        desc: 'Mill client to search, analyze and report on logs in Manta.',
        options: [
            {names: ['help', 'h'], type: 'bool', help: 'Print help and exit.'},
            {name: 'version', type: 'bool', help: 'Print version and exit.'},
            {names: ['verbose', 'v'], type: 'bool', help: 'Verbose/debug output.'}
        ],
        //helpBody: {
        //
        //},
        helpOpts: {
            includeEnv: true,
            minHelpCol: 23 /* line up with option help */
        }
    });
}
util.inherits(Mill, Cmdln);

// Custom `init` to handle custom options (i.e. 'version' defined above).
Mill.prototype.init = function (opts, args, callback) {
    if (opts.version) {
        p(this.name, VERSION);
        callback(false);
        return;
    }
    this.opts = opts;
    if (opts.verbose) {
        log.level('trace');
        log.src = true;
    }

    var self = this;
    this.configPath = '/var/db/mill/millconfig.json';
    this.__defineGetter__('config', function () {
        if (!self._configCache) {
            self._configCache = common.loadConfigSync(self.configPath);
        }
        return self._configCache;
    });
    this.__defineGetter__('mantaClient', function () {
        if (!self._mantaClientCache) {
            var config = self.config;
            self._mantaClientCache = manta.createClient({
                sign: manta.cliSigner({
                    keyId: config.keyId,
                    user: config.account
                }),
                user: config.account,
                url: config.url,
                log: log,
                agent: false
            });
        }
        return self._mantaClientCache;
    });

    // Cmdln class handles `opts.help`.
    Cmdln.prototype.init.apply(this, arguments);
};

/**
 * Return a milld Manta path for the given subpath element(s).
 */
Mill.prototype.mpath = function mpath() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
        args.push(String(arguments[i]));
    }
    var tail = path.join.apply(null, args);
    return path.join(this.config.dataDir, tail);
};


Mill.prototype.listSvcs = function listSvcs(svcArgs, callback) {
    var self = this;
    if (svcArgs.length) {
        // TODO: substring searching
        callback(null, svcArgs);
        return;
    }
    var svcs = [];
    self.mantaClient.ls(self.mpath('logs'), function (err, res) {
        if (err) {
            if (err.code === 'NotFoundError') {
                return callback(null, svcs);
            }
            return callback(err);
        }
        res.on('directory', function (svcDir) {
            svcs.push(svcDir.name);
        });
        res.once('end', function () {
            callback(null, svcs);
        });
    });
};

/**
 * Find relevant uploaded mill logs for a given set of: start (Date),
 * end (Date), svc, and inst.
 *
 * TODO: eventually support multiple svc and inst. And substring matching.
 */
Mill.prototype.find = function find(args, callback) {
    var self = this;
    assert.object(args, 'args');
    assert.object(args.start, 'args.start');
    assert.object(args.end, 'args.end');
    assert.arrayOfString(args.svcs, 'args.svcs');
    assert.arrayOfString(args.insts, 'args.insts');

    // Which hours to consider.
    var hours = [];
    var currMs = (new Date(         // start of start hour
        args.start.toISOString().split(':')[0] + ':00:00Z')).valueOf();
    var endMs = args.end.valueOf() - 1;  // just before 'end'
    while (currMs < endMs) {
        hours.push(new Date(currMs));
        currMs += 60 * 60 * 1000;
    }

    self.listSvcs(args.svcs, function (svcsErr, svcs) {
        // Which service+hours dirs in which to look.
        var svcHours = [];
        hours.forEach(function (h) {
            svcs.forEach(function (s) {
                svcHours.push(format('%s/%s/%s/%s/%s',
                    s,
                    h.getUTCFullYear(),
                    zeroPad(h.getUTCMonth() + 1, 2),
                    zeroPad(h.getUTCDate(), 2),
                    zeroPad(h.getUTCHours(), 2)));
            });
        });
        log.info({svcHours: svcHours}, 'need to consider logs for these hours');

        var hits = [];
        var startTime = args.start.valueOf();
        var endTime = args.end.valueOf();
        vasync.forEachPipeline({
            inputs: svcHours,
            func: function oneSvcHour(svcHour, nextSvcHour) {
                var dir = self.mpath('logs', svcHour);
                self.mantaClient.ls(dir, function (err, res) {
                    if (err) {
                        if (err.code === 'NotFoundError') {
                            // TODO: sanity check the 'svc' here for nicer UX
                            return nextSvcHour();
                        }
                        return nextSvcHour(err);
                    }
                    foundOne = true;
                    var files = [];
                    // Only consider the *.log.t files for requested instance(s).
                    var instsRe = (args.insts.length
                        ? format('(%s)', args.insts.join('|'))
                        : '(.*?)');
                    var pat = new RegExp('^' + instsRe + '-\\d+\\.\\w+\\.log\\.t$');
                    res.on('object', function (obj) {
                        if (pat.test(obj.name)) {
                            files.push(path.join(dir, obj.name));
                        }
                    });
                    res.once('end', function () {
                        files.sort();
                        for (var i = 0; i < files.length; i++) {
                            var file = files[i];
                            var stamp = file.slice(file.lastIndexOf('-') + 1);
                            stamp = Number(stamp.split('.')[0]);
                            if (!hits.length) {
                                if (stamp > startTime) {
                                    // The first log rotated after `start`.
                                    hits.push(file);
                                }
                            } else {
                                // Already found the first one. Every log file after
                                // that until the *last* one should be cat'ed.
                                hits.push(file);
                            }
                            if (stamp > endTime) {
                                // All rotations after this won't have records
                                // before `end`.
                                break;
                            }
                        }
                        nextSvcHour();
                    });
                });
            }
        }, function (err, results) {
            if (err) {
                callback(err);
            } else {
                callback(null, hits);
            }
        });
    });
};


Mill.prototype.do_cat = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }

    try {
        var findOpts = findOptsFromArgs(args);
    } catch (ex) {
        callback(ex);
        return;
    }
    if (findOpts.svcs.length === 0) {
        callback(new errors.UsageError('no log "service" was given'));
        return;
    } else if (findOpts.svcs.length > 1) {
        callback(new errors.UsageError('only one "service" is supported ' +
            '(use "merge-cat")'));
        return;
    }
    if (findOpts.insts.length === 0) {
        callback(new errors.UsageError('no log "instance" was given'));
        return;
    } else if (findOpts.insts.length > 1) {
        callback(new errors.UsageError('only one "instance" is supported ' +
            '(use "merge-cat")'));
        return;
    }
    log.info(findOpts, 'cat logs');

    self.find(findOpts, function (findErr, files) {
        if (findErr) {
            return callback(findErr);
        }
        log.info({files: files}, 'cat %d files', files.length);
        vasync.forEachPipeline({
            inputs: files,
            func: function catOne(file, next) {
                log.info({file: file}, 'cat a file');
                self.mantaClient.get(file, function (getErr, stream) {
                    if (getErr) {
                        return next(getErr);
                    }
                    // TODO: proper line handling (lstream)
                    //var lstream = new LineStream();
                    stream.setEncoding('binary');
                    var head;
                    stream.on('data', function (chunk) {
                        var lines = chunk.split('\n');
                        if (!head) {
                            head = lines.shift();
                        }
                        process.stdout.write(lines.map(function (l) {
                            return l.replace(/^\d+,/, '');
                        }).join('\n'), 'binary');
                    })
                    stream.once('end', next);
                });
            }
        }, function (err, results) {
            callback(err);
        });
    });
};
Mill.prototype.do_cat.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    }
];
Mill.prototype.do_cat.help = (
    'Cat the given time range of a log for a service instance.\n'
    + '\n'
    + 'Usage:\n'
    + '     {{name}} cat service=<service> instance=<instance> \\\n'
    + '         [start=<time-or-range>] [end=<time-or-range>]\n'
    + '\n'
    + '{{options}}\n'
    + 'Cat logs for a service instance for the given time range. If "start"\n'
    + 'and "end" are not given it defaults to the last 10 minutes.'
);

Mill.prototype.do_merge_cat = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }

    try {
        var findOpts = findOptsFromArgs(args);
    } catch (ex) {
        callback(ex);
        return;
    }
    log.info(findOpts, 'merge-cat logs');

    self.find(findOpts, function (findErr, files) {
        if (findErr) {
            return callback(findErr);
        }
        log.info({files: files}, 'merge-cat %d files', files.length);
        if (files.length === 0) {
            return callback();
        }
        var jobSpec = {
            name: 'merge-cat',
            phases: [{
                // Strip the header line.
                exec: 'tail +2'
            }, {
                // WARNING: Y2330 alert!
                exec: 'sort -n -k1,1 -t, | cut -b 15-',
                type: 'reduce'
            }]
        };
        common.runJob({
            log: log,
            client: self.mantaClient,
            jobSpec: jobSpec,
            inputs: files,
            streamOutputs: process.stdout
        }, callback);
    });
};
Mill.prototype.do_merge_cat.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    }
];
Mill.prototype.do_merge_cat.help = (
    'Cat the given time range of *multiple* logs and merge in time order.\n'
    + '\n'
    + 'Usage:\n'
    + '     {{name}} merge-cat [service=<service> ...] [instance=<instance> ...] \\\n'
    + '         [start=<time-or-range>] [end=<time-or-range>]\n'
    + '\n'
    + '{{options}}\n'
);


Mill.prototype.do_grep = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }

    try {
        var findOpts = findOptsFromArgs(args, true);
    } catch (ex) {
        callback(ex);
        return;
    }
    if (findOpts.extra.length !== 1) {
        return callback(new errors.UsageError('incorrect args: there must be ' +
            'exactly one search term'))
    }
    var term = findOpts.extra[0];
    log.info(findOpts, 'grep logs');

    self.find(findOpts, function (findErr, files) {
        if (findErr) {
            return callback(findErr);
        }
        log.info({files: files}, 'grep %d files', files.length);
        if (files.length === 0) {
            return callback();
        }
        var jobSpec = {
            name: 'grep',
            phases: [{
                // Strip the header line, then grep.
                exec: format('tail +2 | (grep \'%s\' || true)',
                    term.replace(/'/g, "\\'"))
            }, {
                // WARNING: Y2330 alert!
                exec: 'sort -n -k1,1 -t, | cut -b 15-',
                type: 'reduce'
            }]
        };
        common.runJob({
            log: log,
            client: self.mantaClient,
            jobSpec: jobSpec,
            inputs: files,
            streamOutputs: process.stdout
        }, callback);
    });
};
Mill.prototype.do_grep.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    }
];
Mill.prototype.do_grep.help = (
    'Grep some logs.\n'
    + '\n'
    + 'Usage:\n'
    + '     {{name}} grep [service=<service> ...] [instance=<instance> ...] \\\n'
    + '         [start=<time-or-range>] [end=<time-or-range>] <term>\n'
    + '\n'
    + '{{options}}'
);


Mill.prototype.do_search = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }

    try {
        var findOpts = findOptsFromArgs(args, true);
    } catch (ex) {
        callback(ex);
        return;
    }
    log.info(findOpts, 'search logs');

    var grepArgs = [];
    var opArgs = [];
    findOpts.extra.forEach(function (extra) {
        if (/(>|=)/.test(extra)) {
            // Any argument that assets/search.js will grok.
            opArgs.push(extra);
        } else {
            grepArgs.push(extra);
        }
    });
    if (grepArgs.length) {
        callback(new errors.UsageError('cannot specify "grep" args (those ' +
            'without an operator) yet: ' + grepArgs.join(', ')));
    }
    //e('findOpts', findOpts)
    //e('now', new Date().toISOString())
    //e('start', findOpts.start.toISOString())
    //e('end', findOpts.end.toISOString())

    self.find(findOpts, function (findErr, files) {
        if (findErr) {
            return callback(findErr);
        }
        log.info({files: files}, 'search %d files', files.length);
        //e('files:', files)
        if (files.length === 0) {
            return callback();
        }
        var searchJs = self.mpath('assets', 'search.js');
        var phases = []
        if (grepArgs.length) {
            // TODO: support grep args with a pre-grep. But then need to
            // handle header lines specially in search.js. I.e. add a switch to
            // search.js to not expect it.
            TODO
        } else {
            var searchArgs = opArgs.map(function (o) {
                return o.replace(/'/g, "\\'")
            }).join("' '");
            phases = [
                {
                    exec: format('/assets%s -j \'%s\'', searchJs, searchArgs),
                    assets: [searchJs]
                },
                {
                    // WARNING: Y2330 alert!
                    exec: 'sort -n -k1,1 -t, | cut -b 15-',
                    type: 'reduce'
                }
            ];
        }
        common.runJob({
            log: log,
            client: self.mantaClient,
            jobSpec: {name: 'search', phases: phases},
            inputs: files,
            streamOutputs: process.stdout
        }, callback);
    });
};
Mill.prototype.do_search.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    }
];
Mill.prototype.do_search.help = (
    'Search parsed logs with field/value predicates.\n'
    + '\n'
    + 'Usage:\n'
    + '     {{name}} search [service=<service> ...] [instance=<instance> ...] \\\n'
    + '         [start=<time-or-range>] [end=<time-or-range>] <predicate>...\n'
    + '\n'
    + '{{options}}\n'
    + 'TODO: doc this\n'
);




//---- mainline

function drainStdoutAndExit(code) {
    var stdoutFlushed = process.stdout.write('');
    if (stdoutFlushed) {
        process.exit(code);
    } else {
        process.stdout.on('drain', function () {
            process.exit(code);
        });
    }
}

process.stdout.on('error', function (err) {
    if (err.code === 'EPIPE') {
        // See <https://github.com/trentm/json/issues/9>.
        process.exit(0);
        /**
         * ^^^ A hard exit here means that stderr won't get drained, which
         * might mean some missing logging. However, attempting
         *      drainStdoutAndExit(0);
         * is proving difficult -- getting repeated "Error: This socket is
         * closed." on write attempts to stdout leading to "RangeError:
         * Maximum call stack size exceeded"
         */
    } else {
        console.warn('mill error: stdout (%s): %s', err.code, err)
        drainStdoutAndExit(1);
    }
});

if (require.main === module) {
    var mill = new Mill();
    mill.main(process.argv, function (err, subcmd) {
        var code = err && (err.body ? err.body.code : err.code);
        if (err && code !== 'NoCommand') {
            var subcmdStr = subcmd ? ' ' + subcmd : '';
            if (code) {
                console.error('%s%s: error (%s): %s', mill.name, subcmdStr,
                    code, err.message);
            } else {
                console.error('%s%s: error: %s', mill.name, subcmdStr,
                    err.message);
            }
            if (mill.opts && mill.opts.verbose && err.stack) {
                console.error('\n' + err.stack);
            }
            process.exit(err.exitStatus !== undefined ? err.exitStatus : 1);
        }
    });
}
// vim: set softtabstop=4 shiftwidth=4:
